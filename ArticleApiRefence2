import requests
from newspaper import Article
import google.generativeai as genai

# ---------------- CONFIG ---------------- #
NEWSAPI_KEY = "" #Create a news api https://newsapi.org/ account and get api key
GEMINI_API_KEY = ""  # Replace this with your google api key

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")
# ---------------------------------------- #

# ‚úÖ Get the topic from user
topic = input("Enter a news topic to search: ")

# ‚úÖ Search NewsAPI (Everything endpoint)
url = "https://newsapi.org/v2/everything"
params = {
    "q": topic,
    "language": "en",
    "pageSize": 15,
    "sortBy": "relevancy",
    "apiKey": NEWSAPI_KEY
}

response = requests.get(url, params=params)

def extract_full_text(url):
    try:
        article = Article(url)
        article.download()
        article.parse()
        return article.text.strip()
    except Exception as e:
        print(f"   ‚ö†Ô∏è Failed to extract article text: {e}")
        return None

import requests
import json

def summarize_with_gemini_http(article_text):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

    headers = {
        "Content-Type": "application/json"
    }

    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": f"Summarize the following news article in 3‚Äì4 sentences with a neutral and factual tone:\n\n{article_text}"
                    }
                ]
            }
        ]
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))

        if response.status_code == 200:
            result = response.json()
            return result["candidates"][0]["content"]["parts"][0]["text"]
        else:
            return f"‚ö†Ô∏è Gemini API Error {response.status_code}: {response.text}"

    except Exception as e:
        return f"‚ö†Ô∏è Request failed: {str(e)}"


# ‚úÖ Display Results
if response.status_code == 200:
    data = response.json()
    articles = data.get("articles", [])

    if not articles:
        print("No articles found.")
    else:
        for idx, article in enumerate(articles, 1):
            print(f"{idx}. üì∞ {article['title']}")
            print(f"   üè¢ Source: {article['source']['name']}")
            print(f"   üîó URL: {article['url']}")

            full_text = extract_full_text(article['url'])
            if full_text:
                summary = summarize_with_gemini_http(full_text)
                print(f"   üìÑ Gemini Summary:\n   {summary}\n")
            else:
                print("   üìÑ Gemini Summary: Skipped due to scraping issue.\n")

else:
    print(f"‚ùå Failed to fetch news. Status: {response.status_code}")
    print(response.text)
